{"ast":null,"code":"/**\n * API Service для работы с backend расписания РУДН\n */import axios from'axios';const BACKEND_URL=process.env.REACT_APP_BACKEND_URL;const API_BASE=\"\".concat(BACKEND_URL,\"/api\");// Создаем экземпляр axios с базовыми настройками\nconst api=axios.create({baseURL:API_BASE,timeout:30000,headers:{'Content-Type':'application/json'}});// Обработка ошибок\nconst handleError=error=>{if(error.response){// Сервер ответил с ошибкой\nconsole.error('API Error:',error.response.data);throw new Error(error.response.data.detail||error.response.data.error||'Ошибка сервера');}else if(error.request){// Запрос был отправлен, но ответа нет\nconsole.error('Network Error:',error.request);throw new Error('Ошибка сети. Проверьте подключение к интернету');}else{// Что-то пошло не так при настройке запроса\nconsole.error('Error:',error.message);throw new Error(error.message);}};/**\n * API методы для расписания\n */export const scheduleAPI={/**\n   * Получить список факультетов\n   */getFaculties:async()=>{try{const response=await api.get('/faculties');return response.data;}catch(error){handleError(error);}},/**\n   * Получить данные фильтров (уровни, курсы, формы, группы)\n   * @param {Object} params - Параметры фильтрации\n   * @param {string} params.facultet_id - ID факультета\n   * @param {string} [params.level_id] - ID уровня\n   * @param {string} [params.kurs] - Курс\n   * @param {string} [params.form_code] - Форма обучения\n   */getFilterData:async params=>{try{const response=await api.post('/filter-data',params);return response.data;}catch(error){handleError(error);}},/**\n   * Получить расписание для группы\n   * @param {Object} params - Параметры запроса\n   * @param {string} params.facultet_id - ID факультета\n   * @param {string} params.level_id - ID уровня\n   * @param {string} params.kurs - Курс\n   * @param {string} params.form_code - Форма обучения\n   * @param {string} params.group_id - ID группы\n   * @param {number} [params.week_number=1] - Номер недели (1 или 2)\n   */getSchedule:async params=>{try{const response=await api.post('/schedule',params);return response.data;}catch(error){handleError(error);}},/**\n   * Получить кэшированное расписание\n   * @param {string} groupId - ID группы\n   * @param {number} weekNumber - Номер недели\n   */getCachedSchedule:async(groupId,weekNumber)=>{try{const response=await api.get(\"/schedule-cached/\".concat(groupId,\"/\").concat(weekNumber));return response.data;}catch(error){// Для кэша не бросаем ошибку, просто возвращаем null\nreturn null;}}};/**\n * API методы для пользовательских настроек\n */export const userAPI={/**\n   * Получить настройки пользователя\n   * @param {number} telegramId - Telegram ID пользователя\n   */getUserSettings:async telegramId=>{try{const response=await api.get(\"/user-settings/\".concat(telegramId));return response.data;}catch(error){if(error.response&&error.response.status===404){// Пользователь не найден - это нормально\nreturn null;}handleError(error);}},/**\n   * Сохранить настройки пользователя\n   * @param {Object} settings - Настройки пользователя\n   * @param {number} settings.telegram_id - Telegram ID\n   * @param {string} [settings.username] - Username\n   * @param {string} [settings.first_name] - Имя\n   * @param {string} [settings.last_name] - Фамилия\n   * @param {string} settings.group_id - ID группы\n   * @param {string} settings.group_name - Название группы\n   * @param {string} settings.facultet_id - ID факультета\n   * @param {string} [settings.facultet_name] - Название факультета\n   * @param {string} settings.level_id - ID уровня\n   * @param {string} settings.kurs - Курс\n   * @param {string} settings.form_code - Форма обучения\n   */saveUserSettings:async settings=>{try{const response=await api.post('/user-settings',settings);return response.data;}catch(error){handleError(error);}},/**\n   * Удалить настройки пользователя\n   * @param {number} telegramId - Telegram ID пользователя\n   */deleteUserSettings:async telegramId=>{try{const response=await api.delete(\"/user-settings/\".concat(telegramId));return response.data;}catch(error){handleError(error);}}};export default api;","map":{"version":3,"names":["axios","BACKEND_URL","process","env","REACT_APP_BACKEND_URL","API_BASE","concat","api","create","baseURL","timeout","headers","handleError","error","response","console","data","Error","detail","request","message","scheduleAPI","getFaculties","get","getFilterData","params","post","getSchedule","getCachedSchedule","groupId","weekNumber","userAPI","getUserSettings","telegramId","status","saveUserSettings","settings","deleteUserSettings","delete"],"sources":["/var/www/rudn-schedule.ru/frontend/src/services/api.js"],"sourcesContent":["/**\n * API Service для работы с backend расписания РУДН\n */\n\nimport axios from 'axios';\n\nconst BACKEND_URL = process.env.REACT_APP_BACKEND_URL;\nconst API_BASE = `${BACKEND_URL}/api`;\n\n// Создаем экземпляр axios с базовыми настройками\nconst api = axios.create({\n  baseURL: API_BASE,\n  timeout: 30000,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// Обработка ошибок\nconst handleError = (error) => {\n  if (error.response) {\n    // Сервер ответил с ошибкой\n    console.error('API Error:', error.response.data);\n    throw new Error(error.response.data.detail || error.response.data.error || 'Ошибка сервера');\n  } else if (error.request) {\n    // Запрос был отправлен, но ответа нет\n    console.error('Network Error:', error.request);\n    throw new Error('Ошибка сети. Проверьте подключение к интернету');\n  } else {\n    // Что-то пошло не так при настройке запроса\n    console.error('Error:', error.message);\n    throw new Error(error.message);\n  }\n};\n\n/**\n * API методы для расписания\n */\nexport const scheduleAPI = {\n  /**\n   * Получить список факультетов\n   */\n  getFaculties: async () => {\n    try {\n      const response = await api.get('/faculties');\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n\n  /**\n   * Получить данные фильтров (уровни, курсы, формы, группы)\n   * @param {Object} params - Параметры фильтрации\n   * @param {string} params.facultet_id - ID факультета\n   * @param {string} [params.level_id] - ID уровня\n   * @param {string} [params.kurs] - Курс\n   * @param {string} [params.form_code] - Форма обучения\n   */\n  getFilterData: async (params) => {\n    try {\n      const response = await api.post('/filter-data', params);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n\n  /**\n   * Получить расписание для группы\n   * @param {Object} params - Параметры запроса\n   * @param {string} params.facultet_id - ID факультета\n   * @param {string} params.level_id - ID уровня\n   * @param {string} params.kurs - Курс\n   * @param {string} params.form_code - Форма обучения\n   * @param {string} params.group_id - ID группы\n   * @param {number} [params.week_number=1] - Номер недели (1 или 2)\n   */\n  getSchedule: async (params) => {\n    try {\n      const response = await api.post('/schedule', params);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n\n  /**\n   * Получить кэшированное расписание\n   * @param {string} groupId - ID группы\n   * @param {number} weekNumber - Номер недели\n   */\n  getCachedSchedule: async (groupId, weekNumber) => {\n    try {\n      const response = await api.get(`/schedule-cached/${groupId}/${weekNumber}`);\n      return response.data;\n    } catch (error) {\n      // Для кэша не бросаем ошибку, просто возвращаем null\n      return null;\n    }\n  },\n};\n\n/**\n * API методы для пользовательских настроек\n */\nexport const userAPI = {\n  /**\n   * Получить настройки пользователя\n   * @param {number} telegramId - Telegram ID пользователя\n   */\n  getUserSettings: async (telegramId) => {\n    try {\n      const response = await api.get(`/user-settings/${telegramId}`);\n      return response.data;\n    } catch (error) {\n      if (error.response && error.response.status === 404) {\n        // Пользователь не найден - это нормально\n        return null;\n      }\n      handleError(error);\n    }\n  },\n\n  /**\n   * Сохранить настройки пользователя\n   * @param {Object} settings - Настройки пользователя\n   * @param {number} settings.telegram_id - Telegram ID\n   * @param {string} [settings.username] - Username\n   * @param {string} [settings.first_name] - Имя\n   * @param {string} [settings.last_name] - Фамилия\n   * @param {string} settings.group_id - ID группы\n   * @param {string} settings.group_name - Название группы\n   * @param {string} settings.facultet_id - ID факультета\n   * @param {string} [settings.facultet_name] - Название факультета\n   * @param {string} settings.level_id - ID уровня\n   * @param {string} settings.kurs - Курс\n   * @param {string} settings.form_code - Форма обучения\n   */\n  saveUserSettings: async (settings) => {\n    try {\n      const response = await api.post('/user-settings', settings);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n\n  /**\n   * Удалить настройки пользователя\n   * @param {number} telegramId - Telegram ID пользователя\n   */\n  deleteUserSettings: async (telegramId) => {\n    try {\n      const response = await api.delete(`/user-settings/${telegramId}`);\n      return response.data;\n    } catch (error) {\n      handleError(error);\n    }\n  },\n};\n\nexport default api;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}